/**
 * 📌 기타 제어문 
 * 1. 반복문 내에 사용되며, 반복문의 흐름을 제어하는 역할 
 * 2. 주요 종류 및 작성법 
 *   1) break문 
 *      → 현재 속한 반복문을 종료하는 역할 
 *         break;
 *   2) continue문 
 *      → 현재 속한 반복문의 나머지 코드를 실행하지 않고 조건 검사로 이동하는 역할 
 *         continue;
 *   3) label문 (비추천)
 *      → 반복문에 라벨을 붙여서 해당 라벨이 붙은 반복문을 제어하는 역할 
 *      → break문과 continue문을 통해 특정 라벨이 붙은 반복문을 제어할 수 있음 
 *         label: 반복문;
 */

// 1. break 문 
// 반복문 수행시마다 난수(랜덤값, 1~100) 발생시켜 출력
// 단, 발생된 랜덤값이 5의 배수일 경우 반복 종료 

// 0.0 <= 난수 < 1.0        : Math.random()
// 0.0 <= 난수 < 100.0      : Math.random() * 100
// 1.0 <= 난수 < 101.0      : Math.random() * 100 + 1
//  1  <= 난수 < 101        : Math.floor(Math.random() * 100 + 1)

while(true) {   //조건이 항상 true → 무한 반복
                // 반복문 내부에서 break를 만나야 종료
  let random = Math.floor(Math.random() * 100 + 1);
  /*
  Math.random() → 0 이상 1 미만의 난수 생성
  Math.random() * 100 → 0 이상 100 미만 난수
  Math.floor(...) + 1 → 1~100 사이 정수 난수 생성
  변수 random에 저장
  */
  console.log(random);  //생성된 난수 출력
  if(random % 5 === 0){ //난수가 5의 배수이면 반복 종료, random % 5 === 0 → 5로 나누어 떨어지는지 확인
    break;              // 조건 만족하면 break → while 종료
  }
} 
  /* 출력 :
    15가 나온 이유: 난수 생성 결과 중 처음으로 조건(random % 5 === 0)을 만족했기 때문
   항상 15가 나오는 것이 아님 → 매번 다른 난수가 나오므로 실행 결과는 달라짐
  */

// 2. continue
// 1부터 100까지의 총 합계를 구하기 
// 단, 6의 배수 값은 빼고 덧셈연산 진행 

let sum = 0; //합계를 저장할 변수 초기화 → 0
/*
sum += 1;
sum += 2;
sum += 3;
...
sum += 100;
*/
for(let i=1; i<=100; i++){ // i를 1부터 100까지 반복 (i = 1~100 )
  if(i % 6 === 0){ //i % 6 === 0 → i가 6의 배수인지 확인
    continue;      //6의 배수면 continue → 이번 반복 건너뛰고 다음 반복으로
  }
  sum += i; //6의 배수가 아니면 sum에 i 더하기
}
console.log(sum); //출력 : 4234
/*
continue → 조건에 맞으면 이번 반복 스킵
sum += i → 조건에 맞지 않는 경우만 합산
결과: 1~100에서 6의 배수 제외한 합 (4234)
*/
